// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROPERTY_SCHEMA_H_
#define FLATBUFFERS_GENERATED_PROPERTY_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

namespace Schema {

struct Property;
struct PropertyBuilder;

struct Property FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PropertyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_VALUE = 6,
    VT_TYPE = 8,
    VT_SUBPROPERTIES = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int32_t value() const {
    return GetField<int32_t>(VT_VALUE, 0);
  }
  int32_t type() const {
    return GetField<int32_t>(VT_TYPE, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Schema::Property>> *subproperties() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Schema::Property>> *>(VT_SUBPROPERTIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_VALUE) &&
           VerifyField<int32_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_SUBPROPERTIES) &&
           verifier.VerifyVector(subproperties()) &&
           verifier.VerifyVectorOfTables(subproperties()) &&
           verifier.EndTable();
  }
};

struct PropertyBuilder {
  typedef Property Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Property::VT_NAME, name);
  }
  void add_value(int32_t value) {
    fbb_.AddElement<int32_t>(Property::VT_VALUE, value, 0);
  }
  void add_type(int32_t type) {
    fbb_.AddElement<int32_t>(Property::VT_TYPE, type, 0);
  }
  void add_subproperties(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Schema::Property>>> subproperties) {
    fbb_.AddOffset(Property::VT_SUBPROPERTIES, subproperties);
  }
  explicit PropertyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Property> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Property>(end);
    return o;
  }
};

inline flatbuffers::Offset<Property> CreateProperty(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t value = 0,
    int32_t type = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Schema::Property>>> subproperties = 0) {
  PropertyBuilder builder_(_fbb);
  builder_.add_subproperties(subproperties);
  builder_.add_type(type);
  builder_.add_value(value);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Property> CreatePropertyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int32_t value = 0,
    int32_t type = 0,
    const std::vector<flatbuffers::Offset<Schema::Property>> *subproperties = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto subproperties__ = subproperties ? _fbb.CreateVector<flatbuffers::Offset<Schema::Property>>(*subproperties) : 0;
  return Schema::CreateProperty(
      _fbb,
      name__,
      value,
      type,
      subproperties__);
}

inline const Schema::Property *GetProperty(const void *buf) {
  return flatbuffers::GetRoot<Schema::Property>(buf);
}

inline const Schema::Property *GetSizePrefixedProperty(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Schema::Property>(buf);
}

inline bool VerifyPropertyBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Schema::Property>(nullptr);
}

inline bool VerifySizePrefixedPropertyBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Schema::Property>(nullptr);
}

inline void FinishPropertyBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Schema::Property> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPropertyBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Schema::Property> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Schema

#endif  // FLATBUFFERS_GENERATED_PROPERTY_SCHEMA_H_
